@using Negocio.Shared.Entities
@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Nombre:</label>
        <div>
            <InputText @bind-Value="Member.Name" />
            <ValidationMessage For="@(() => Member.Name)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Correo Electrónico:</label>
        <div>
            <InputText @bind-Value="Member.Email" />
            <ValidationMessage For="@(() => Member.Email)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Numero de Telefono:</label>
        <div>
            <InputText @bind-Value="Member.PhoneNumber" />
            <ValidationMessage For="@(() => Member.PhoneNumber)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Membership ID:</label>
        <div>
            <InputNumber @bind-Value="Member.MembershipId" />
            <ValidationMessage For="@(() => Member.MembershipId)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" type="button" @onclick="() => ReturnAction.InvokeAsync()">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new (Member);
    }

    [EditorRequired]
    [Parameter]
    public Member Member { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();
        if (!formWasEdited)
        {
            return;
        }
        if (FormPostedSuccessfully)
        {
            return;
        }
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        context.PreventNavigation();
    }
}
