@page "/memberships"
@using Negocio.Shared.Entities
@using Negocio.WEB.Repositories
@using Negocio.WEB.Shared
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@inject IRepository repository
<h1>MembershipsIndex</h1>
<div class="mb-3">
    <a class="btn btn-primary " href="/memberships/create">New Membership</a>
</div>
<GenericList MyList="Memberships">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Memberships</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var membership in Memberships!)
                {
                    <tr>
                        <td>
                            @membership.Id
                        </td>
                        <td>
                            @membership.Level
                        </td>
                        <td>
                            @membership.Privileges
                        </td>
                        <td>
                            <a href="/events/edit/@membership.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick="@(() => DeleteAsync(membership))">Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>
@code {
    public List<Membership> Memberships { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHttp = await repository.GetAsync<List<Membership>>("/api/memberships");
        Memberships = responseHttp.Response!;
    }

    private async Task DeleteAsync(Membership membership)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Estás seguro de que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync<Member>($"api/memberships/{membership.Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
} 