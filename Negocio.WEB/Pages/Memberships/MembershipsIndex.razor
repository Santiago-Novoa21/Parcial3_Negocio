@page "/memberships"

@using Negocio.Shared.Entities
@using Negocio.WEB.Repositories
@using Negocio.WEB.Shared

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h1>Membresías</h1>

<div class="mb-3">
    <a class="btn btn-primary" href="/memberships/create">Nueva Membresía</a>
</div>

<GenericList MyList="Memberships">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nivel del Miembro</th>
                    <th>Privilegios</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var membership in Memberships!)
                {
                    <tr>
                        <td>@membership.Level</td>
                        <td>@membership.Privileges</td>
                        <td>
                            <a class="btn btn-warning" href="/memberships/edit/@membership.Id">Editar</a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(membership))">Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Membership> Memberships { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHttp = await repository.GetAsync<List<Membership>>("/api/memberships");
        Memberships = responseHttp.Response!;
    }

    private async Task Delete(Membership membership)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Estás seguro de que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<Membership>($"api/memberships/{membership.Id}");

        if (responseHttp.Error)
        {
            var mensajeError = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            await Load();
        }
    }
}
