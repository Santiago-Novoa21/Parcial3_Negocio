@page "/events/create"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Crear Evento</h3>

<EditForm Model="currentEvent" OnValidSubmit="Create">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="eventName">Nombre del Evento</label>
        <InputText id="eventName" class="form-control" @bind-Value="currentEvent.Name" />
        <ValidationMessage For="@(() => currentEvent.Name)" />
    </div>

    <div class="form-group">
        <label for="eventDescription">Descripción</label>
        <InputTextArea id="eventDescription" class="form-control" @bind-Value="currentEvent.Description" />
        <ValidationMessage For="@(() => currentEvent.Description)" />
    </div>

    <div class="form-group">
        <label for="eventDate">Fecha</label>
        <InputDate id="eventDate" class="form-control" @bind-Value="currentEvent.Date" />
        <ValidationMessage For="@(() => currentEvent.Date)" />
    </div>

    <div class="form-group">
        <label for="eventCapacity">Capacidad</label>
        <InputNumber id="eventCapacity" class="form-control" @bind-Value="currentEvent.Capacity" />
        <ValidationMessage For="@(() => currentEvent.Capacity)" />
    </div>

    <button class="btn btn-primary" type="submit">Crear Evento</button>
    <button class="btn btn-secondary" type="button" @onclick="Return">Regresar</button>
</EditForm>

@code {
    private Event currentEvent = new();

    private async Task Create()
    {
        var responseHttp = await repository.PostAsync<Event, object>("/api/events", currentEvent);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await sweetAlertService.FireAsync("Éxito", "Evento creado correctamente", SweetAlertIcon.Success);
        navigationManager.NavigateTo("/events");
    }

    private void Return()
    {
        navigationManager.NavigateTo("/events");
    }
}
