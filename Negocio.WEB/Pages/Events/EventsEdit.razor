@page "/events/edit/{Id:int}"

@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar Evento</h3>

@if (currentEvent is null)
{
    <p>Cargando...</p>
}
else
{
    <EventsForm Event="currentEvent" OnSubmit="Edit" ReturnAction="Return" />
}

@code {
    private Event currentEvent;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.GetAsync<Event>($"api/events/{Id}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, "error");
            navigationManager.NavigateTo("/events");
            return;
        }

        currentEvent = responseHttp.Response;
    }

    private async Task Edit()
    {
        var responseHttp = await repository.PutAsync("/api/events", currentEvent);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, "error");
            return;
        }

        await sweetAlertService.FireAsync("Éxito", "Evento actualizado correctamente", "success");
        navigationManager.NavigateTo("/events");
    }

    private void Return()
    {
        navigationManager.NavigateTo("/events");
    }
}
