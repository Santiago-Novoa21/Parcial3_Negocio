@using Negocio.Shared.Entities

<h3>EventForm</h3>
@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Nombre del Evento:</label>
        <div>
            <InputText class="form-control" @bind-Value="Event.Name" />
            <ValidationMessage For="@(() => Event.Name)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Descripción:</label>
        <div>
            <InputText class="form-control" @bind-Value="Event.Description" />
            <ValidationMessage For="@(() => Event.Description)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha:</label>
        <div>
            <InputDate class="form-control" @bind-Value="Event.Date" />
            <ValidationMessage For="@(() => Event.Date)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Capacidad:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="Event.Capacity" />
            <ValidationMessage For="@(() => Event.Capacity)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" type="button" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Event);
    }

    [EditorRequired]
    [Parameter]
    public Event Event { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Deseas abandonar la página y perder los cambios?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true
        });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}

