
@page "/events"

@using CurrieTechnologies.Razor.SweetAlert2
@using Negocio.Shared.Entities
@using Negocio.WEB.Repositories
@using Negocio.WEB.Shared

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h1>Eventos</h1>

<div class="mb-3">
    <a class="btn btn-primary" href="/events/create">Nuevo Evento</a>
</div>

<GenericList MyList="Events">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Fecha</th>
                    <th>Capacidad</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var evento in Events!)
                {
                    <tr>
                        <td>@evento.Name</td>
                        <td>@evento.Description</td>
                        <td>@evento.Date.ToShortDateString()</td>
                        <td>@evento.Capacity</td>
                        <td>
                            <a class="btn btn-warning" href="/events/edit/@evento.Id">Editar</a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(evento))">Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Event> Events { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        var responseHttp = await repository.GetAsync<List<Event>>("/api/events");
        if (responseHttp.Error)
        {
            var messageError = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
        }
        else
        {
            Events = responseHttp.Response!;
        }
    }

    private async Task Delete(Event evento)
    {
        var confirm = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Estás seguro de que deseas borrar este evento?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        if (string.IsNullOrEmpty(confirm.Value))
        {
            return; 
        }

        var responseHTTP = await repository.DeleteAsync<Event>($"api/events/{evento.Id}");

        if (responseHTTP.Error)
        {
            var messageError = await responseHTTP.GetErrorMessage();
            await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
        }
        else
        {
            Events.Remove(evento);
            await LoadEvents();
        }
    }
}
